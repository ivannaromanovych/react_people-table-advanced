{"version":3,"sources":["utils/helpers.ts","components/Navbar.tsx","App.tsx","components/HomePage.tsx","utils/Sex.ts","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","utils/constants.ts","components/PersonItem.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getNavLinkClass","isActive","cn","findPersonByName","people","name","find","person","normalizeString","str","toLowerCase","trim","getSortOptionClass","sortOption","sortOrder","header","faSortIcon","Navbar","className","role","to","App","HomePage","Sex","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","centuriesValues","PeopleFilters","filterParams","setFilterParams","query","get","centuries","getAll","sex","toggleCentury","century","includes","filter","cent","Male","Female","type","placeholder","onChange","event","newQuery","target","newFilterParams","map","length","Loader","PersonLink","slug","TABLE_HEADERS","SORT_OPTIONS","PersonItem","isSelected","born","died","motherName","fatherName","mother","father","PeopleTable","selectedSlug","useParams","sortParams","toggleSort","newSortOption","sort","order","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","isError","setIsError","isLoading","setIsLoading","setPeople","useEffect","getPeople","newPeople","catch","finally","isEverythingOk","isNoPeopleOnServer","noFilterChoose","filteredPeople","useMemo","temp","normalizedQuery","includesQuery","Math","ceil","a","b","localeCompare","reverse","NotFoundPage","Root","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.c9cc364e.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { Person } from '../types/Person';\n\nexport const getNavLinkClass = ({ isActive }: { isActive: boolean }) => (\n  cn('navbar-item', { 'has-background-grey-lighter': isActive })\n);\n\nexport const findPersonByName = (people: Person[], name: string | null) => {\n  return people.find(person => person.name === name) || null;\n};\n\nexport function normalizeString(str: string | null) {\n  return str?.toLowerCase().trim() || null;\n}\n\nexport function getSortOptionClass(\n  sortOption: string | null,\n  sortOrder: string | null,\n  header: string,\n) {\n  const headerNorm = normalizeString(header);\n  const sortClassByOrder = !sortOrder\n    ? 'fa-sort-down'\n    : 'fa-sort-up';\n\n  const faSortIcon = sortOption !== headerNorm\n    ? 'fa-sort'\n    : sortClassByOrder;\n\n  return cn(\n    'fas',\n    faSortIcon,\n  );\n}\n","import { NavLink } from 'react-router-dom';\nimport { getNavLinkClass } from '../utils/helpers';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={getNavLinkClass}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"/people\"\n            className={getNavLinkClass}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <Outlet />\n      </main>\n    </div>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export enum Sex {\n  Male = 'm',\n  Female = 'f',\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { Sex } from '../utils/Sex';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\n\nconst centuriesValues = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters: React.FC = () => {\n  const [filterParams, setFilterParams] = useSearchParams();\n  const query = filterParams.get('query') || '';\n  const centuries = filterParams.getAll('centuries') || [];\n  const sex = filterParams.get('sex') as Sex || null;\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newQuery = event.target.value || null;\n\n    const newFilterParams = getSearchWith(filterParams, { query: newQuery });\n\n    setFilterParams(newFilterParams);\n  };\n\n  const toggleCentury = (century: string) => {\n    const newCent = centuries.includes(century)\n      ? centuries.filter(cent => cent !== century)\n      : [...centuries, century];\n\n    return newCent;\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={cn(\n            { 'is-active': !sex },\n          )}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={cn(\n            { 'is-active': sex === Sex.Male },\n          )}\n          params={{ sex: Sex.Male }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={cn(\n            { 'is-active': sex === Sex.Female },\n          )}\n          params={{ sex: Sex.Female }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesValues.map(century => (\n              <SearchLink\n                key={century}\n                params={{ centuries: toggleCentury(century) }}\n                data-cy=\"century\"\n                className={cn(\n                  'button',\n                  'mr-1',\n                  { 'is-info': centuries.includes(century) },\n                )}\n              >\n                {century}\n              </SearchLink>\n\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn(\n                'button',\n                'is-success',\n                { 'is-outlined': centuries.length },\n              )}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ centuries: null, sex: null, query: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport cn from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({\n  person,\n}) => {\n  const { slug, name, sex } = person;\n\n  return (\n    <Link\n      to={`/people/${slug}`}\n      className={cn(\n        { 'has-text-danger': sex === 'f' },\n      )}\n    >\n      {name}\n    </Link>\n  );\n};\n","export const TABLE_HEADERS = [\n  'Name',\n  'Sex',\n  'Born',\n  'Died',\n  'Mother',\n  'Father',\n];\n\nexport const NOT_SET_PARRENT_VALUE = '-';\n\nexport const SORT_OPTIONS = ['Name', 'Sex', 'Born', 'Died'];\n","import cn from 'classnames';\nimport { Person } from '../types/Person';\nimport { PersonLink } from './PersonLink';\nimport { NOT_SET_PARRENT_VALUE } from '../utils/constants';\n\ntype Props = {\n  person: Person,\n  isSelected?: boolean,\n};\n\nexport const PersonItem: React.FC<Props> = ({\n  person,\n  isSelected = false,\n\n}) => {\n  const {\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n    mother,\n    father,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn(\n        { 'has-background-warning': isSelected },\n      )}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || NOT_SET_PARRENT_VALUE\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || NOT_SET_PARRENT_VALUE\n        )}\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonItem } from './PersonItem';\nimport { SORT_OPTIONS, TABLE_HEADERS } from '../utils/constants';\nimport { getSortOptionClass, normalizeString } from '../utils/helpers';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug: selectedSlug } = useParams();\n  const [sortParams] = useSearchParams();\n  const sortOption = sortParams.get('sort') || null;\n  const sortOrder = sortParams.get('order') || null;\n\n  const toggleSort = (header: string) => {\n    const newSortOption = normalizeString(header);\n    let newSortParams = {};\n\n    if (sortOption !== newSortOption) {\n      newSortParams = {\n        sort: normalizeString(newSortOption),\n        order: null,\n      };\n    } else if (!sortOrder) {\n      newSortParams = {\n        sort: sortOption,\n        order: 'desc',\n      };\n    } else {\n      newSortParams = {\n        sort: null,\n        order: null,\n      };\n    }\n\n    return newSortParams;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table\n  is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {TABLE_HEADERS.map(header => (\n            <th key={header}>\n              {SORT_OPTIONS.includes(header) ? (\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {header}\n                  <SearchLink\n                    params={toggleSort(header)}\n                  >\n                    <span className=\"icon\">\n                      <i className={getSortOptionClass(\n                        sortOption,\n                        sortOrder,\n                        header,\n                      )}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              ) : (\n                header\n              )}\n            </th>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonItem\n            key={person.slug}\n            person={person}\n            isSelected={person.slug === selectedSlug}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\nimport { findPersonByName, normalizeString } from '../utils/helpers';\nimport { Person } from '../types';\nimport { Sex } from '../utils/Sex';\n\nexport const PeoplePage = () => {\n  // work with server\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [people, setPeople] = useState<Person[]>([]);\n\n  useEffect(() => {\n    getPeople()\n      .then(response => {\n        const newPeople = response.map(person => ({\n          ...person,\n          mother: findPersonByName(response, person.motherName),\n          father: findPersonByName(response, person.fatherName),\n        }));\n\n        setPeople(newPeople);\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const isEverythingOk = !isError && !isLoading && !!people.length;\n  const isNoPeopleOnServer = !isError && !isLoading && !people.length;\n  // #endregion\n  const [filterParams] = useSearchParams();\n  const query = filterParams.get('query') || '';\n  const centuries = filterParams.getAll('centuries') || [];\n  const sex = filterParams.get('sex') as Sex || null;\n  const sortOption = filterParams.get('sort') || null;\n  const sortOrder = filterParams.get('order') || null;\n  const noFilterChoose = !query && !centuries.length && !sex && !sortOption;\n\n  const includesQuery = (person: Person) => {\n    if (!query) {\n      return true;\n    }\n\n    const { name, motherName, fatherName } = person;\n    const normalizedQuery = normalizeString(query) as string;\n\n    return normalizeString(name)?.includes(normalizedQuery)\n      || normalizeString(motherName)?.includes(normalizedQuery)\n      || normalizeString(fatherName)?.includes(normalizedQuery);\n  };\n\n  const filteredPeople = useMemo(() => {\n    if (noFilterChoose) {\n      return people;\n    }\n\n    const temp = people\n      .filter(person => includesQuery(person))\n      .filter(person => (sex ? sex === person.sex : true))\n      .filter(person => (centuries.length > 0\n        ? centuries.includes(Math.ceil(person.born / 100).toString())\n        : true\n      ));\n\n    if (sortOption) {\n      temp.sort((a, b) => {\n        switch (sortOption) {\n          case 'name':\n          case 'sex': return a[sortOption].localeCompare(b[sortOption]);\n          case 'born':\n          case 'died': return a[sortOption] - b[sortOption];\n          default: return 0;\n        }\n      });\n    }\n\n    if (sortOrder) {\n      temp.reverse();\n    }\n\n    return temp;\n  }, [people, query, centuries, sex]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {isEverythingOk && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading ? (\n                <Loader />\n              ) : (isError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              ))}\n              {isNoPeopleOnServer && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isEverythingOk && (\n                !filteredPeople.length ? (\n                  <p>\n                    There are no people matching the current search criteria\n                  </p>\n                ) : (\n                  <PeopleTable people={filteredPeople} />\n                )\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  HashRouter as Router,\n  Route,\n  Routes,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route\n        path=\"/\"\n        element={<App />}\n      >\n        <Route\n          path=\"home\"\n          element={<Navigate to=\"/\" replace />}\n        />\n\n        <Route index path=\"/\" element={<HomePage />} />\n\n        <Route path=\"people\">\n          <Route path=\":slug?\" element={<PeoplePage />} />\n        </Route>\n\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}